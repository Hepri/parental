//go:build windows

package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/Hepri/parental/internal/config"
	"github.com/Hepri/parental/internal/session"
	"github.com/Hepri/parental/internal/shutdown"
	"github.com/Hepri/parental/internal/tracker"
)

type TelegramBot struct {
	bot         *tgbotapi.BotAPI
	config      *config.Config
	sessionMgr  *session.Manager
	tracker     *tracker.TimeTracker
	shutdownMgr *shutdown.ShutdownManager
	userStates  map[int64]string                 // userID -> state
	userData    map[int64]map[string]interface{} // userID -> data
}

type BotCommand struct {
	Command     string
	Description string
	Handler     func(update tgbotapi.Update) error
}

func NewBot(cfg *config.Config, sessionMgr *session.Manager, tracker *tracker.TimeTracker, shutdownMgr *shutdown.ShutdownManager) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(cfg.TelegramBotToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %v", err)
	}

	bot.Debug = false // Set to true for debugging

	return &TelegramBot{
		bot:         bot,
		config:      cfg,
		sessionMgr:  sessionMgr,
		tracker:     tracker,
		shutdownMgr: shutdownMgr,
		userStates:  make(map[int64]string),
		userData:    make(map[int64]map[string]interface{}),
	}, nil
}

func (tb *TelegramBot) Start(ctx context.Context) error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := tb.bot.GetUpdatesChan(u)

	log.Printf("Telegram bot started. Bot username: @%s", tb.bot.Self.UserName)

	for {
		select {
		case <-ctx.Done():
			return nil
		case update := <-updates:
			if err := tb.handleUpdate(update); err != nil {
				log.Printf("Error handling update: %v", err)
			}
		}
	}
}

func (tb *TelegramBot) Stop() {
	log.Println("Telegram bot stopped")
}

// GetMe returns bot information for testing
func (tb *TelegramBot) GetMe() (tgbotapi.User, error) {
	return tb.bot.GetMe()
}

func (tb *TelegramBot) handleUpdate(update tgbotapi.Update) error {
	if update.Message == nil && update.CallbackQuery == nil {
		return nil
	}

	var userID int64
	var chatID int64

	if update.Message != nil {
		userID = update.Message.From.ID
		chatID = update.Message.Chat.ID
	} else if update.CallbackQuery != nil {
		userID = update.CallbackQuery.From.ID
		chatID = update.CallbackQuery.Message.Chat.ID
	}

	// Check authorization
	if !tb.isAuthorized(userID) {
		msg := tgbotapi.NewMessage(chatID, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π.")
		tb.bot.Send(msg)
		return nil
	}

	// Handle callback queries
	if update.CallbackQuery != nil {
		return tb.handleCallbackQuery(update.CallbackQuery)
	}

	// Handle text messages
	if update.Message != nil {
		return tb.handleMessage(update.Message)
	}

	return nil
}

func (tb *TelegramBot) isAuthorized(userID int64) bool {
	for _, authorizedID := range tb.config.AuthorizedUserIDs {
		if userID == authorizedID {
			return true
		}
	}
	return false
}

func (tb *TelegramBot) handleMessage(message *tgbotapi.Message) error {
	text := message.Text
	chatID := message.Chat.ID

	switch text {
	case "/start":
		return tb.showMainMenu(chatID)
	default:
		// Check if user is in a state that expects input
		if state, exists := tb.userStates[message.From.ID]; exists {
			return tb.handleStateInput(message, state)
		}

		// Unknown command
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
		tb.bot.Send(msg)
		return nil
	}
}

func (tb *TelegramBot) handleCallbackQuery(query *tgbotapi.CallbackQuery) error {
	data := query.Data
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// Answer callback query
	callback := tgbotapi.NewCallback(query.ID, "")
	tb.bot.Request(callback)

	switch {
	case strings.HasPrefix(data, "grant_"):
		return tb.handleGrantAccess(data, chatID, messageID)
	case strings.HasPrefix(data, "duration_"):
		return tb.handleDurationSelection(data, chatID, messageID)
	case strings.HasPrefix(data, "lock_"):
		return tb.handleLockSession(data, chatID, messageID)
	case data == "lock_all":
		return tb.handleLockAllNow(chatID, messageID)
	case data == "resetpw_all":
		return tb.handleResetAllPasswords(chatID, messageID)
	case strings.HasPrefix(data, "resetpw_"):
		return tb.handleResetPassword(data, chatID, messageID)
	case data == "stats_menu":
		return tb.showStatsMenu(chatID, messageID)
	case data == "stats_today":
		return tb.showTodayStats(chatID, messageID)
	case data == "stats_week":
		return tb.showWeekStats(chatID, messageID)
	case data == "computer_menu":
		return tb.showComputerMenu(chatID, messageID)
	case data == "computer_status":
		return tb.showComputerStatus(chatID, messageID)
	case data == "shutdown_now":
		return tb.shutdownNow(chatID, messageID)
	case strings.HasPrefix(data, "shutdown_"):
		return tb.scheduleShutdown(data, chatID, messageID)
	case data == "cancel_shutdown":
		return tb.cancelShutdown(chatID, messageID)
	case data == "resetpw_menu":
		return tb.showResetPasswordMenu(chatID, messageID)
	case data == "main_menu":
		return tb.showMainMenu(chatID)
	default:
		return nil
	}
}

func (tb *TelegramBot) showMainMenu(chatID int64) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üü¢ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø", "grant_menu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîí –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å", "lock_all"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÅ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å", "resetpw_menu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats_menu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º", "computer_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "üè† *–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	_, err := tb.bot.Send(msg)
	return err
}

func (tb *TelegramBot) showResetPasswordMenu(chatID int64, messageID int) error {
	var buttons [][]tgbotapi.InlineKeyboardButton

	// Add "reset all" action first
	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîÅ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –≤—Å–µ—Ö", "resetpw_all"),
	))

	for _, account := range tb.config.ChildAccounts {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(account.FullName, "resetpw_"+account.Username),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	if messageID > 0 {
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, "üîÅ *–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &keyboard
		_, err := tb.bot.Send(editMsg)
		return err
	}

	msg := tgbotapi.NewMessage(chatID, "üîÅ *–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	_, err := tb.bot.Send(msg)
	return err
}

func (tb *TelegramBot) handleResetPassword(data string, chatID int64, messageID int) error {
	// data format: resetpw_<username>
	username := strings.TrimPrefix(data, "resetpw_")

	var configured string
	for _, acc := range tb.config.ChildAccounts {
		if acc.Username == username {
			configured = acc.Password
			break
		}
	}

	if configured == "" {
		// Fallback: reset all child passwords
		return tb.handleResetAllPasswords(chatID, messageID)
	}

	if err := config.SetUserPassword(username, configured); err != nil {
		msg := tgbotapi.NewEditMessageText(chatID, messageID, fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è %s: %v", username, err))
		tb.bot.Send(msg)
		return err
	}

	msg := tgbotapi.NewEditMessageText(chatID, messageID, fmt.Sprintf("‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è %s —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", username))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
		},
	}
	_, err := tb.bot.Send(msg)
	return err
}

func (tb *TelegramBot) handleResetAllPasswords(chatID int64, messageID int) error {
	total := len(tb.config.ChildAccounts)
	success := 0
	failed := 0
	for _, acc := range tb.config.ChildAccounts {
		if acc.Password == "" {
			// Skip accounts without configured password
			failed++
			continue
		}
		if err := config.SetUserPassword(acc.Username, acc.Password); err != nil {
			failed++
		} else {
			success++
		}
	}
	text := fmt.Sprintf("‚úÖ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à—ë–Ω. –£—Å–ø–µ—à–Ω–æ: %d –∏–∑ %d.", success, total)
	if failed > 0 {
		text = fmt.Sprintf("‚úÖ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à—ë–Ω. –£—Å–ø–µ—à–Ω–æ: %d –∏–∑ %d. –ù–µ —É–¥–∞–ª–æ—Å—å: %d.", success, total, failed)
	}
	msg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
		},
	}
	_, err := tb.bot.Send(msg)
	return err
}

func (tb *TelegramBot) handleGrantAccess(data string, chatID int64, messageID int) error {
	if data == "grant_menu" {
		return tb.showGrantAccessMenu(chatID, messageID)
	}

	// Extract username from callback data
	username := strings.TrimPrefix(data, "grant_")

	// Set user state and data
	tb.userStates[chatID] = "grant_duration"
	tb.userData[chatID] = map[string]interface{}{
		"selected_user": username,
	}

	return tb.showDurationMenu(chatID, messageID)
}

func (tb *TelegramBot) showGrantAccessMenu(chatID int64, messageID int) error {
	var buttons [][]tgbotapi.InlineKeyboardButton

	for _, account := range tb.config.ChildAccounts {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(account.FullName, "grant_"+account.Username),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	if messageID > 0 {
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, "üë§ *–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–µ–±—ë–Ω–∫–∞*\n\n–ö–æ–º—É –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø?")
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &keyboard
		_, err := tb.bot.Send(editMsg)
		return err
	}

	msg := tgbotapi.NewMessage(chatID, "üë§ *–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–µ–±—ë–Ω–∫–∞*\n\n–ö–æ–º—É –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø?")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	_, err := tb.bot.Send(msg)
	return err
}

func (tb *TelegramBot) showDurationMenu(chatID int64, messageID int) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("15 –º–∏–Ω—É—Ç", "duration_15"),
			tgbotapi.NewInlineKeyboardButtonData("30 –º–∏–Ω—É—Ç", "duration_30"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1 —á–∞—Å", "duration_60"),
			tgbotapi.NewInlineKeyboardButtonData("2 —á–∞—Å–∞", "duration_120"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î—Ä—É–≥–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "duration_custom"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "grant_menu"),
		),
	)

	userData, ok := tb.userData[chatID]
	if !ok {
		tb.userStates[chatID] = "grant_duration"
		return tb.showGrantAccessMenu(chatID, messageID)
	}
	username, ok := userData["selected_user"].(string)
	if !ok || username == "" {
		tb.userStates[chatID] = "grant_duration"
		return tb.showGrantAccessMenu(chatID, messageID)
	}

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, fmt.Sprintf("‚è∞ *–í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *%s*\n\n–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø?", username))
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard

	_, err := tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) handleDurationSelection(data string, chatID int64, messageID int) error {
	if data == "duration_custom" {
		tb.userStates[chatID] = "custom_duration"
		msg := tgbotapi.NewEditMessageText(chatID, messageID, "‚å®Ô∏è *–°–≤–æ—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*\n\n–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (1‚Äì480):")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "grant_menu")},
			},
		}
		_, err := tb.bot.Send(msg)
		return err
	}

	// Extract duration from callback data
	durationStr := strings.TrimPrefix(data, "duration_")
	duration, err := strconv.Atoi(durationStr)
	if err != nil {
		return err
	}

	return tb.grantAccess(chatID, messageID, duration)
}

func (tb *TelegramBot) handleStateInput(message *tgbotapi.Message, state string) error {
	chatID := message.Chat.ID
	text := message.Text

	switch state {
	case "custom_duration":
		duration, err := strconv.Atoi(text)
		if err != nil || duration < 1 || duration > 480 {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 480 –º–∏–Ω—É—Ç.")
			tb.bot.Send(msg)
			return nil
		}

		// Clear state
		delete(tb.userStates, message.From.ID)

		return tb.grantAccess(chatID, 0, duration)
	}

	return nil
}

func (tb *TelegramBot) grantAccess(chatID int64, messageID int, durationMinutes int) error {
	userData, ok := tb.userData[chatID]
	if !ok {
		// guide user to select child first
		_ = tb.showGrantAccessMenu(chatID, messageID)
		return fmt.Errorf("no child selected")
	}
	username, ok := userData["selected_user"].(string)
	if !ok || username == "" {
		_ = tb.showGrantAccessMenu(chatID, messageID)
		return fmt.Errorf("no child selected")
	}

	duration := time.Duration(durationMinutes) * time.Minute

	err := tb.sessionMgr.GrantAccess(username, duration)
	if err != nil {
		msgText := fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –¥–ª—è %s: %v", username, err)
		if messageID > 0 {
			editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
			tb.bot.Send(editMsg)
		} else {
			msg := tgbotapi.NewMessage(chatID, msgText)
			tb.bot.Send(msg)
		}
		return err
	}

	// Clear user data
	delete(tb.userData, chatID)

	msgText := fmt.Sprintf("‚úÖ *–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω*\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –º–∏–Ω\n\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–∞–Ω—Å –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –∞ –ø–∞—Ä–æ–ª—å ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", username, durationMinutes)
	if messageID > 0 {
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{tgbotapi.NewInlineKeyboardButtonData("üîí –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–π—á–∞—Å", "lock_"+username)},
				{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
			},
		}
		_, err = tb.bot.Send(editMsg)
	} else {
		msg := tgbotapi.NewMessage(chatID, msgText)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîí –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–π—á–∞—Å", "lock_"+username),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
			),
		)
		_, err = tb.bot.Send(msg)
	}

	return err
}

func (tb *TelegramBot) handleLockSession(data string, chatID int64, messageID int) error {
	if data == "lock_menu" {
		return tb.showLockMenu(chatID, messageID)
	}

	username := strings.TrimPrefix(data, "lock_")

	err := tb.sessionMgr.LockSession(username)
	if err != nil {
		msgText := fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å %s: %v", username, err)
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
		tb.bot.Send(editMsg)
		return err
	}

	msgText := fmt.Sprintf("üîí *–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –ø–∞—Ä–æ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", username)
	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
		},
	}

	_, err = tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) handleLockAllNow(chatID int64, messageID int) error {
	if tb.sessionMgr == nil {
		return nil
	}
	if err := tb.sessionMgr.ForceLogoffAllChildSessions(); err != nil {
		msg := tgbotapi.NewEditMessageText(chatID, messageID, fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —Å–µ–∞–Ω—Å—ã: %v", err))
		tb.bot.Send(msg)
		return err
	}
	msg := tgbotapi.NewEditMessageText(chatID, messageID, "üîí –í—Å–µ –¥–µ—Ç—Å–∫–∏–µ —Å–µ–∞–Ω—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø–∞—Ä–æ–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
		},
	}
	_, err := tb.bot.Send(msg)
	return err
}

func (tb *TelegramBot) showLockMenu(chatID int64, messageID int) error {
	activeSessions := tb.sessionMgr.GetActiveSessions()

	var buttons [][]tgbotapi.InlineKeyboardButton

	if len(activeSessions) == 0 {
		msgText := "üîí *–°–µ–∞–Ω—Å—ã*\n\n–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–∞–Ω—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
			},
		}
		_, err := tb.bot.Send(editMsg)
		return err
	}

	for username, session := range activeSessions {
		remaining := session.Duration - time.Since(session.StartTime)
		buttonText := fmt.Sprintf("üîí %s (–æ—Å—Ç–∞–ª–æ—Å—å %v)", username, remaining.Round(time.Minute))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, "lock_"+username),
		))
	}

	if len(activeSessions) > 1 {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîí –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ", "lock_all"),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, "üîí *–°–µ–∞–Ω—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∞–Ω—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard

	_, err := tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) showStatsMenu(chatID int64, messageID int) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "stats_today"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", "stats_week"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:")
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard

	_, err := tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) showComputerMenu(chatID int64, messageID int) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíª –°–æ—Å—Ç–æ—è–Ω–∏–µ", "computer_status"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ–π—á–∞—Å", "shutdown_now"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ", "shutdown_menu"),
		),
	)

	if tb.shutdownMgr.IsShutdownScheduled() {
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard,
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ", "cancel_shutdown"),
			),
		)
	}

	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard,
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, "‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard

	_, err := tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) showTodayStats(chatID int64, messageID int) error {
	report := tb.tracker.GetTodayReport()

	if len(report) == 0 {
		msgText := "üìä *–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n–î–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ—Ç."
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{tgbotapi.NewInlineKeyboardButtonData("üìä –ó–∞ –Ω–µ–¥–µ–ª—é", "stats_week")},
				{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
			},
		}
		_, err := tb.bot.Send(editMsg)
		return err
	}

	var msgText strings.Builder
	msgText.WriteString("üìä *–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n")

	totalTime := int64(0)
	for app, seconds := range report {
		totalTime += seconds
		minutes := seconds / 60
		msgText.WriteString(fmt.Sprintf("‚Ä¢ %s: %d –º–∏–Ω\n", app, minutes))
	}

	msgText.WriteString(fmt.Sprintf("\nüìà –ò—Ç–æ–≥–æ: %d –º–∏–Ω", totalTime/60))

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText.String())
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("üìä –ó–∞ –Ω–µ–¥–µ–ª—é", "stats_week")},
			{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
		},
	}

	_, err := tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) showWeekStats(chatID int64, messageID int) error {
	report := tb.tracker.GetWeekReport()

	if len(report) == 0 {
		msgText := "üìä *–û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é*\n\n–î–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ—Ç."
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{tgbotapi.NewInlineKeyboardButtonData("üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è", "stats_today")},
				{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
			},
		}
		_, err := tb.bot.Send(editMsg)
		return err
	}

	var msgText strings.Builder
	msgText.WriteString("üìä *–û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é*\n\n")

	totalTime := int64(0)
	for app, seconds := range report {
		totalTime += seconds
		minutes := seconds / 60
		msgText.WriteString(fmt.Sprintf("‚Ä¢ %s: %d –º–∏–Ω\n", app, minutes))
	}

	msgText.WriteString(fmt.Sprintf("\nüìà –ò—Ç–æ–≥–æ: %d –º–∏–Ω", totalTime/60))

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText.String())
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è", "stats_today")},
			{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
		},
	}

	_, err := tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) showComputerStatus(chatID int64, messageID int) error {
	activeSessions := tb.sessionMgr.GetActiveSessions()

	var msgText strings.Builder
	msgText.WriteString("üíª *–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞*\n\n")

	if len(activeSessions) == 0 {
		msgText.WriteString("üîí –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ –Ω–µ—Ç\n")
	} else {
		msgText.WriteString("üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–∞–Ω—Å—ã:\n")
		for username, session := range activeSessions {
			remaining := session.Duration - time.Since(session.StartTime)
			msgText.WriteString(fmt.Sprintf("‚Ä¢ %s: –æ—Å—Ç–∞–ª–æ—Å—å %v\n", username, remaining.Round(time.Minute)))
		}
	}

	if tb.shutdownMgr.IsShutdownScheduled() {
		scheduledTime := tb.shutdownMgr.GetScheduledTime()
		msgText.WriteString(fmt.Sprintf("\n‚è∞ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: %s", scheduledTime.Format("15:04")))
	}

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText.String())
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ–π—á–∞—Å", "shutdown_now")},
			{tgbotapi.NewInlineKeyboardButtonData("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ", "shutdown_menu")},
			{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
		},
	}

	_, err := tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) shutdownNow(chatID int64, messageID int) error {
	err := tb.shutdownMgr.ShutdownNow()
	if err != nil {
		msgText := fmt.Sprintf("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å*\n\n–û—à–∏–±–∫–∞: %v", err)
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
			},
		}
		_, err = tb.bot.Send(editMsg)
		return err
	}

	msgText := "üî¥ *–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ*\n\n–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ", "cancel_shutdown")},
			{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
		},
	}

	_, err = tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) scheduleShutdown(data string, chatID int64, messageID int) error {
	if data == "shutdown_menu" {
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("5 –º–∏–Ω—É—Ç", "shutdown_5"),
				tgbotapi.NewInlineKeyboardButtonData("15 –º–∏–Ω—É—Ç", "shutdown_15"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("30 –º–∏–Ω—É—Ç", "shutdown_30"),
				tgbotapi.NewInlineKeyboardButtonData("1 —á–∞—Å", "shutdown_60"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
			),
		)

		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, "‚è∞ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä:")
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &keyboard

		_, err := tb.bot.Send(editMsg)
		return err
	}

	// parse minutes
	minsStr := strings.TrimPrefix(data, "shutdown_")
	mins, err := strconv.Atoi(minsStr)
	if err != nil {
		return err
	}

	err = tb.shutdownMgr.ScheduleShutdown(mins)
	if err != nil {
		msgText := fmt.Sprintf("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ*\n\n–û—à–∏–±–∫–∞: %v", err)
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
			},
		}
		_, err = tb.bot.Send(editMsg)
		return err
	}

	msgText := fmt.Sprintf("‚è∞ *–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ*\n\n–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ %d –º–∏–Ω—É—Ç.", mins)
	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ", "cancel_shutdown")},
			{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
		},
	}
	_, err = tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) cancelShutdown(chatID int64, messageID int) error {
	err := tb.shutdownMgr.CancelShutdown()
	if err != nil {
		msgText := fmt.Sprintf("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ*\n\n–û—à–∏–±–∫–∞: %v", err)
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
			},
		}
		_, err = tb.bot.Send(editMsg)
		return err
	}

	msgText := "‚ùå *–í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ*."
	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
		},
	}
	_, err = tb.bot.Send(editMsg)
	return err
}

func (tb *TelegramBot) NotifySessionExpired(username string) {
	// Notify all authorized users about expired session
	for _, userID := range tb.config.AuthorizedUserIDs {
		msg := tgbotapi.NewMessage(userID, fmt.Sprintf("‚è∞ *–°–µ–∞–Ω—Å –∏—Å—Ç–µ–∫*\n\n–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏—Å—Ç–µ–∫–ª–∞ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.", username))
		msg.ParseMode = "Markdown"
		tb.bot.Send(msg)
	}
}
